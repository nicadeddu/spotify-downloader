name: Build Spotify Downloader

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Consente di eseguire manualmente dall'interfaccia di GitHub
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            asset_name: Spotify-Downloader-Windows
            pyinstaller_args: --name="Spotify-Downloader" --windowed gui.py --clean
          - os: macos-latest
            asset_name: Spotify-Downloader-macOS
            pyinstaller_args: --name="Spotify-Downloader" --windowed gui.py --clean
          - os: ubuntu-latest
            asset_name: Spotify-Downloader-Linux
            pyinstaller_args: --name="Spotify-Downloader" --windowed gui.py --clean

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - List files in repository
        run: |
          ls -la
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Debug - Python version
        run: python --version

      # Installa tkinter su Ubuntu
      - name: Install tkinter (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk
          echo "Tkinter installed"
          python -c "import tkinter; print('Tkinter version:', tkinter.TkVersion)"

      - name: Install FFmpeg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          ffmpeg -version

      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ffmpeg
          ffmpeg -version

      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg -y
          ffmpeg -version
        shell: powershell

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip --version
          echo "Installing requirements..."
          pip install -r requirements.txt
          echo "Installing PyInstaller..."
          pip install pyinstaller
          pip list

      - name: Debug - Verify GUI libraries
        run: |
          python -c "import sys; print('Python path:', sys.path)"
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            python -c "import tkinter; print('Tkinter OK')" || echo "Tkinter still not working"
          fi
        shell: bash
        continue-on-error: true

      - name: Debug - Verify gui.py exists
        run: |
          ls -la *.py
          echo "Content of gui.py:"
          cat gui.py | head -20
        shell: bash
        continue-on-error: true

      - name: Create assets directory
        run: |
          mkdir -p assets
          ls -la

      - name: Build with PyInstaller
        run: |
          echo "Running PyInstaller with args: ${{ matrix.pyinstaller_args }}"
          python -m PyInstaller ${{ matrix.pyinstaller_args }}

      - name: Debug - Check PyInstaller output
        run: |
          echo "Checking dist directory:"
          ls -la dist/
        shell: bash
        continue-on-error: true

      - name: Package Windows application
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          dir
          powershell Compress-Archive -Path "Spotify-Downloader" -DestinationPath "${{ matrix.asset_name }}.zip"
        shell: cmd

      - name: Package macOS application
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          ls -la
          zip -r ${{ matrix.asset_name }}.zip "Spotify-Downloader.app"

      - name: Package Linux application
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist
          ls -la
          tar -czvf ${{ matrix.asset_name }}.tar.gz "Spotify-Downloader"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            dist/*.zip
            dist/*.tar.gz
          retention-days: 7

      # Opzionale: Crea un rilascio quando viene taggato (es. v1.0.0)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.zip
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}